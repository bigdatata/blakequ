有童鞋问我为什么不用SDK2.1 ,2.2来进行游戏开发，那我这里稍微说两句：
    1.Android SDK 属于向下兼容！那么低版本可以运行的，高版本基本上更是没问题！（当然每次SDK的更新也会带来新功能，或者修改了一些原来的BUG等等，那么其实对于游戏开发来说，如果你的游戏中不需要更高的SDK版本的支持情况下，完全不必去追求最新的SDK！）
    2.使用低版本进行游戏开发这样能兼顾更多的机型，获取更多的用户！
    3.大家都知道Android SDK 每次版本的更新，底层代码也会更健壮和优化了!比如我们公司的网游Android版在G2（SDK1.5）上跑起来稍微有些卡，而在我的手机上（SDK2.2）运行起来流畅的没说的~各种舒坦~~但是这样也会带来一些弊端，比如我们自己游戏如果上来就用高版本SDK进行开发，那么对于性能、内存上到底如何，我们都不会很容易的看出其效果，如果我们用低版本的SDK则会让我们明显的感受到性能到底如何~你想想如果你的游戏在1.5 ，1.6上跑起来很流畅，那放在更高版本的SDK机器上更是没说的啦~
    总结:游戏开发中，如果你游戏不需要更高的API的支持，那么推荐基于SDK 1.5和1.6来开发！
     在上一篇中我给大家介绍了触摸屏手势操作，但是这种触屏手势的操作比较有局限性；比如我们都知道Android可以利用手势来解锁，比如九宫格形式的，通过自定义的一个单笔画手势可以解开屏幕锁，还可以自定义笔画手势来启动一个应用等，那么这种所谓的笔画手势其实就是今天我要给大家讲解的输入法手势识别技术！这种手势是我们可以自己来自定义，而不像之前的触屏手势操作只是利用Android 对一些触屏动作的封装罢了。
     
首先本篇主要学习两点：
    1. 如何创建输入法手势、删除输入法手势、从SD卡中读取出手势文件！
    2.当输入法手势创建后，如何来匹配出我们的自定义手势！
 
下面我们来熟习两个类和几个概念：
     1. 什么是 GestureOverlayView ？ 简单点说其实就是一个手写绘图区；
     2. 什么是 GestureLibrary ？ 这个类是对手势进行保存、删除等操作的，一个存放手势的小仓库！
    3. 笔划是什么，字体笔画？ 是的，其实就是跟我们写字的笔划一个概念！
   4.什么是笔划类型？ 输入法手势操作中，笔划类型有两种；一种是：单一笔划，另外一种是：多笔划
    所谓单一笔划笔划就是一笔划画出一个手势，从你手指接触屏幕开始到你离开屏幕笔画就会立刻形成一个手势!一气呵成！
    而多笔划则是可以在一定紧凑时间内随意几笔划都可!然后超过这个紧凑时间后便会形成一个手势！
    
    
    
    从以上代码中我们看出在创建手势之前，手写绘图区（GestureOverlayView）肯定先被创建出来，然后我们就可以在其区域中进行笔划绘画手势了，当然绘画手势前，我们也需要设置了笔划类型，也就是我一开始给大家介绍的~其后最重要的就是手写绘图区的手势监听器绑定，增加OnGestureListener这个监听器重写了四个函数，这里最重要的就两个函数：
onGestureStarted 和 onGestureEnded ； 手势开始和手势结束的监听函数!
    尤其是手势结束监听这个函数尤为重要，在其中我设置好几个条件语句，这么几个条件一方面是让大家了解Gesture中一些比较重要常用的方法，另一方面我要提醒各位童鞋：
    如果你设置笔划类型是多笔划类型的，那么理想状态下，应该是在一段紧凑时间内，不管你使用了几笔划来绘制手势，系统都应该在判定你在一定短暂时间内没有再进行笔划的时候才应该创建手势，并且系统响应此函数；
    其实错了，一开始我也这么想，但是发现，不管你设置的笔划类型是单一的还是多笔划当你手指离开屏幕，不管你当前是第几笔，Android都会去响应这个完成函数，so~ 我在这里调用手势Gesture类中的getStrokesCount（）函数，这个函数会记录在紧凑时间内你绘制手势的笔划数，那么根据这个函数我们就可以解决手指离开屏幕总被响应的问题了，因为单一笔划类型永远这个值不会大于1！
    而 if (event.getAction() == MotionEvent.ACTION_UP) ｛｝写这个只是给大家演示第二个参数按键动作该怎么用；