首先，肯定是绘制两个圆形，无可置疑；圆心点重合，为了区分 ，所以设置了不同颜色；
    灰色：固定不动的摇杆背景（也意味着摇杆的活动范围）；
    红色：摇杆；
     然后考虑：红色摇杆肯定跟随手指触屏的位置而移动，那么这个很easy啦，只要在触屏事件中处理，将获取的触屏XY坐标赋值与摇杆XY坐标即可；这个没问题；但是紧接着在思考一个问题:
    一般情况下，我们不可能希望摇杆一直跟随手指位置，所以需要一个摇杆的活动区域，也就如同上图中的灰色区域，在灰色区域内摇杆可以随着用户的触屏位置移动，但是一旦用户触屏位置在活动区域之外，摇杆就不应该跑出灰色区域；所以具体实现步骤如下：
    1） 得到通过摇杆的坐标与触屏点的坐标得到所形成的角度Angle
    2） 根据Angle，以及已知所在圆的半径，算出摇杆所在灰色圆形上做圆周运动的当前X,Y坐标;
    首先第一步: 算出摇杆坐标与触屏坐标形成的角度
    
    圆周运动公式：通过三角函数定理得出：
    X坐标：所在圆的半径*角度的余弦值
    Y坐标：所在圆形半径*角度的正弦值
    圆周的大小，由所在圆的半径R的大小来决定； 
    通过以上的公式我们就可以让摇杆在灰色圆形上做圆周运动，当然除此之外我们还要注意三点：
    1：做圆周运动的大小，应该跟灰色区域的半径相同；
    2：触屏事件中应该首先判定用户触屏的位置是否在灰色区域中，如果不在，我们就应该获取摇杆与触屏点的角度然后获取摇杆应该在圆周运动上的XY坐标；如果在，就没有处理了，只要将摇杆位置随着用户点击位置就好了；
    3：在触屏事件中，当用户手指离开屏幕后，应该让摇杆的位置恢复到初始的位置状态； 