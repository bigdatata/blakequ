Thread.setDaemon的用法，经过学习以后了解：
1. setDaemon需要在start方法调用之前使用

2. 线程划分为用户线程和后台(daemon)进程，setDaemon将线程设置为后台进程

3. 如果jvm中都是后台进程，当前jvm将exit。（随之而来的，所有的一切烟消云散，包括后台线程啦）

4. 主线程结束后，

      1） 用户线程将会继续运行

      2） 如果没有用户线程，都是后台进程的话，那么jvm结束

 

另外：

setDaemon方法把java的线程设置为守护线程，此方法的调用必须在线程启动之前执行。只有在当前jvm中所有的线程都为守护线程时，jvm才会退出。
如果创建的线程没有显示调用此方法，这默认为用户线程。

实例如下：

package com.jack.mySample;   
  
import java.io.IOException;   
  
public class TestThread extends Thread {   
       
    public TestThread() {   
    }   
    /** *//**  
     * 线程的run方法，它将和其他线程同时运行  
     */  
    public void run(){   
        for(int i = 1; i <= 100; i++){   
            try{   
                Thread.sleep(100);   
                   
            } catch (InterruptedException ex){   
                ex.printStackTrace();   
            }   
            System.out.println(i);   
        }   
    }   
    public static void main(String [] args){   
        TestThread test = new TestThread();   
        // 如果不设置daemon，那么线程将输出100后才结束   
        test.setDaemon(true);   
        test.start();   
        System.out.println("isDaemon = " + test.isDaemon());   
        try {   
            System.in.read(); // 接受输入，使程序在此停顿，一旦接收到用户输入，main线程结束，守护线程自动结束   
        } catch (IOException ex) {   
            ex.printStackTrace();   
        }   
    }   
} 

 

补充说明：

定义：守护线程--也称“服务线程”，在没有用户线程可服务时会自动离开。

优先级：守护线程的优先级比较低，用于为系统中的其它对象和线程提供服务。

设置：通过setDaemon(true)来设置线程为“守护线程”；将一个用户线程设置为

      守护线程的方式是在 线程对象创建 之前 用线程对象的setDaemon方法。

example: 垃圾回收线程就是一个经典的守护线程，当我们的程序中不再有任何运行的

      Thread,程序就不会再产生垃圾，垃圾回收器也就无事可做，所以当垃圾回收线程是

      JVM上仅剩的线程时，垃圾回收线程会自动离开。它始终在低级别的状态中运行，用于

      实时监控和管理系统中的可回收资源。

生命周期：守护进程（Daemon）是运行在后台的一种特殊进程。它独立于控制终端并且

      周期性地执行某种任务或等待处理某些发生的事件。也就是

      说守护线程不依赖于终端，但是依赖于系统，与系统“同生共死”。那Java的守护线程是

      什么样子的呢。当JVM中所有的线程都是守护线程的时候，JVM就可以退出了；如果还有一个

      或以上的非守护线程则JVM不会退出。





初次碰到这个方法，就被这个怪里怪气的拼写单词懵了下，查API又觉得理解得不深刻，那还是查下Daemon这个词有什么意思，什么词源吧。Daemon 中的 ae 为一个音，重音在 /di:/ 上，好象是指希腊守护神的意思吧。在计算机专业英语中是守护线程的意思。原以为如果一个线程被光荣地定义为守护线程，一定会直到进程运行到最后一刻，但真错了，如果一个线程是守护线程，那么，主线程运行结束时，如果没有任何非守护线程在运行，守护线程就会自尽了。 setDaemon方法是Thread中的方法，默认为false状态，将该线程标记为守护线程或用户线程，该方法必须在启动线程前调用，具有最低的优先级，让系统资源优先调用其他线程。当正在运行的线程都是守护线程时，Java 虚拟机退出。


如下边这个小程序如示：
import java.io.IOException;
class TestMain4 extends Thread {
   public void run() {            //永真循环线程
       for(int i=0;;i++){
           try {
               Thread.sleep(1000);
           } catch (InterruptedException ex) {   }
           System.out.println(i);
       }
   }

   public static void main(String [] args){
      TestMain4 test = new TestMain4();
      test.setDaemon(true);    //调试时可以设置为false，那么这个程序是个死循环，没有退出条件。设置为true，即可主线程结束，test线程也结束。
       test.start();
       System.out.println("isDaemon = " + test.isDaemon());
       try {
           System.in.read();   // 接受输入，使程序在此停顿，一旦接收到用户输入，main线程结束，守护线程自动结束
       } catch (IOException ex) {}
   }
}